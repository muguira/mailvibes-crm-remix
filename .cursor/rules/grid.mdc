---
description: 
globs: 
alwaysApply: false
---
## Grid Sizing Invariants — DO NOT ALTER

The spreadsheet list view is considered **production-ready** as of commit `fix(grid): fully remove onColumnResize prop to restore build`  
(“grid works perfect”). All future changes must respect these invariants unless a new
product-level spec explicitly updates them.

| Aspect                    | Invariant rule | Where the value lives |
|---------------------------|----------------|-----------------------|
| **Row height**            | Fixed, identical for header & body; no per-row overrides. | `ROW_HEIGHT` constant in `grid-constants.ts` |
| **Index “#” column** | Frozen at its current width; **sticky-left (remains visible during horizontal scroll)**; never resizes. | `INDEX_COL_WIDTH` constant |
| **Other columns**         | Widths are the values currently stored in `columnWidths` state. No drag-resize handles; adding a column must set an explicit width in code. | `columnWidths` array |
| **Alignment**             | Header and body share the same `columnWidth` callback; no CSS transforms/margins allowed that shift rows. | `VariableSizeGrid` props |
| **Borders / gap**         | Header bottom border must sit flush on top of Row 1; no blank or grey spacer row permitted. | CSS: `.gridHeaderRow` & `.gridRow` |
| **Pagination**            | Page size is fixed at the constant defined in `PAGINATION_SIZE`. Changing it requires a feature ticket. | `PAGINATION_SIZE` constant |
| **Feature flags**         | `FEATURE_RESIZE = false` and `FEATURE_REORDER = false` until a new epic turns them on. | `grid-feature-flags.ts` |

### Guard-rail
> Any PR that adds `onColumnResize`, a `.resize-handle`, alters `ROW_HEIGHT`,
> changes the length/order of `columnWidths` without a matching schema ticket,
> or re-introduces a header/body mis-alignment (visual diff test > 0 px)
> **must be rejected**.

These rules freeze the current visual grid baseline so future work (filters, saved views, etc.) can proceed without risking layout regressions.

## Contact Loading & Search Filtering — PRODUCTION READY

The instant contacts grid implementation is considered **production-ready** as of commit `0be862a`
("feat: implement instant contacts grid with background loading"). The following implementation details
are frozen and must not be altered without explicit product approval:

### Search & Filtering Invariants

| Aspect | Invariant rule | Implementation |
|--------|----------------|----------------|
| **Instant search** | Search must trigger on every keystroke without Enter key | `onChange` handler in `grid-toolbar.tsx` |
| **Search debounce** | 200ms debounce for performance optimization | `useDebounce` hook with 200ms delay |
| **Client-side filtering** | All filtering happens on cached data, no network calls | `useInstantContacts` hook filters in-memory |
| **Search fields** | Search covers name, email, company, and phone fields | `filteredIds` logic in `useInstantContacts` |
| **Case sensitivity** | Search is case-insensitive | `.toLowerCase()` comparison |

### Contact Loading Invariants

| Aspect | Invariant rule | Implementation |
|--------|----------------|----------------|
| **Initial load** | First 50 contacts render immediately | `initialize()` in `contactsStore.ts` |
| **Background loading** | Remaining contacts load in 1000-record chunks | `CHUNK_SIZE = 1000` constant |
| **Loading delay** | 5ms delay between chunks for UI responsiveness | `await new Promise(r => setTimeout(r, 5))` |
| **Progress indicator** | Shows percentage in pagination bar | `(Loading more... X%)` in `GridPagination` |
| **Data structure** | Zustand store with cache and orderedIds | `useContactsStore` in `contactsStore.ts` |
| **Scalability** | Works with any dataset size (tested 107K+) | Dynamic `totalCount` from database |
| **Persistent loading** | Background loading continues even when navigating away from Contacts tab | `startBackgroundLoading()` in store |
| **Session persistence** | Loaded contacts remain in memory for entire browser session | Global store outside components |
| **Login preloading** | Contact loading starts immediately upon user authentication | `AuthContext` triggers `initialize()` |
| **Progress notification** | Subtle progress indicator shows in bottom-right corner | `ContactPreloaderIndicator` component |

### Protected Files
The following files contain the production-ready implementation and should not be modified:
- `src/stores/contactsStore.ts` - Global contact cache store with persistent background loading
- `src/hooks/use-instant-contacts.ts` - Instant filtering logic
- `src/hooks/use-debounce.ts` - Search debounce utility
- `src/contexts/AuthContext.tsx` - Authentication context with contact preloading trigger
- `src/components/layout/contact-preloader-indicator.tsx` - Progress indicator component
- Related integration in `EditableLeadsGrid.tsx` and `grid-toolbar.tsx`

### Guard-rail
> Any PR that modifies the search behavior to require Enter key, changes the chunk size,
> removes the debounce, adds network calls to search, alters the background loading mechanism,
> removes the persistent loading behavior, or disables login-triggered preloading 
> **must be rejected** unless accompanied by a product specification document.

This implementation provides instant, responsive search even with millions of contacts and ensures
that contacts start loading as soon as the user logs in, providing the best possible user experience.
